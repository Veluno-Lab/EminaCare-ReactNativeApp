import React, { useState, useEffect } from 'react';
import { Alert, Platform, Linking } from 'react-native';
import { Box, VStack, HStack, Button, Center, Divider, ScrollView, Text } from 'native-base';
import NavBarDashboard from '../components/NavbarDashboard';
import { getCurrentLocation, checkLocationPermission, testLocationSetup } from '../services/locationService.js';

export default function CaregiverDashboardScreen({ navigation }: any) {
    // G·ªçi test n√†y tr∆∞·ªõc khi g·ªçi getCurrentLocation
  const runTest = async () => {
    console.log('B·∫Øt ƒë·∫ßu test...');
    const result = await testLocationSetup();
    console.log('Test result:', result);
  };// G·ªçi trong useEffect ho·∫∑c button press
  runTest();
  const [currentLocation, setCurrentLocation] = useState<{latitude: number, longitude: number} | null>(null);
  const [locationError, setLocationError] = useState<string>('');
  const [isLoadingLocation, setIsLoadingLocation] = useState<boolean>(true);
  const [hasTriedLocation, setHasTriedLocation] = useState<boolean>(false);
  
  // Default location (Ho Chi Minh City)
  const defaultLocation = {
    latitude: 10.762622,
    longitude: 106.660172
  };

  // Error message mapping
  const getErrorMessage = (errorCode: string) => {
    switch (errorCode) {
      case 'USER_DENIED_CONSENT':
        return 'B·∫°n c√≥ th·ªÉ b·∫≠t v·ªã tr√≠ trong c√†i ƒë·∫∑t ƒë·ªÉ c√≥ tr·∫£i nghi·ªám t·ªët h∆°n';
      case 'PERMISSION_DENIED':
        return 'Quy·ªÅn truy c·∫≠p v·ªã tr√≠ b·ªã t·ª´ ch·ªëi';
      case 'LOCATION_SERVICE_DISABLED':
        return 'D·ªãch v·ª• v·ªã tr√≠ ch∆∞a ƒë∆∞·ª£c b·∫≠t';
      case 'LOCATION_TIMEOUT':
        return 'Kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠ (timeout)';
      case 'INVALID_POSITION_DATA':
        return 'D·ªØ li·ªáu v·ªã tr√≠ kh√¥ng h·ª£p l·ªá';
      case 'GEOLOCATION_CALL_ERROR':
        return 'L·ªói khi g·ªçi d·ªãch v·ª• v·ªã tr√≠';
      default:
        return 'ƒêang s·ª≠ d·ª•ng v·ªã tr√≠ m·∫∑c ƒë·ªãnh';
    }
  };

  const showLocationErrorAlert = (errorCode: string) => {
    switch (errorCode) {
      case 'PERMISSION_DENIED':
        Alert.alert(
          'C·∫ßn quy·ªÅn truy c·∫≠p v·ªã tr√≠',
          'ƒê·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y, vui l√≤ng v√†o C√†i ƒë·∫∑t > ·ª®ng d·ª•ng > [T√™n ·ª©ng d·ª•ng] > Quy·ªÅn v√† b·∫≠t quy·ªÅn V·ªã tr√≠.',
          [
            { text: 'H·ªßy', style: 'cancel' },
            { 
              text: 'ƒêi ƒë·∫øn C√†i ƒë·∫∑t', 
              onPress: () => {
                if (Platform.OS === 'android') {
                  Linking.openSettings();
                }
              }
            },
          ]
        );
        break;
      case 'LOCATION_SERVICE_DISABLED':
        Alert.alert(
          'D·ªãch v·ª• v·ªã tr√≠ b·ªã t·∫Øt',
          'Vui l√≤ng b·∫≠t d·ªãch v·ª• v·ªã tr√≠ trong c√†i ƒë·∫∑t thi·∫øt b·ªã ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y.',
          [{ text: 'OK' }]
        );
        break;
      // Kh√¥ng hi·ªÉn th·ªã alert cho c√°c l·ªói kh√°c
    }
  };
  
  useEffect(() => {
    const fetchLocation = async () => {
      if (hasTriedLocation) return; // Tr√°nh multiple calls
      
      try {
        setIsLoadingLocation(true);
        setHasTriedLocation(true);
        console.log('ƒêang th·ª≠ l·∫•y v·ªã tr√≠...');
        
        // Ki·ªÉm tra quy·ªÅn tr∆∞·ªõc khi g·ªçi getCurrentLocation
        const hasPermission = await checkLocationPermission();
        
        if (hasPermission) {
          console.log('ƒê√£ c√≥ quy·ªÅn, l·∫•y v·ªã tr√≠ tr·ª±c ti·∫øp...');
          const location = await getCurrentLocation();
          
          if (location) {
            console.log('L·∫•y v·ªã tr√≠ th√†nh c√¥ng:', location);
            setCurrentLocation(location);
            setLocationError('');
          }
        } else {
          // Ch∆∞a c√≥ quy·ªÅn, s·ª≠ d·ª•ng v·ªã tr√≠ m·∫∑c ƒë·ªãnh
          console.log('Ch∆∞a c√≥ quy·ªÅn, s·ª≠ d·ª•ng v·ªã tr√≠ m·∫∑c ƒë·ªãnh');
          setCurrentLocation(defaultLocation);
          setLocationError('S·ª≠ d·ª•ng v·ªã tr√≠ m·∫∑c ƒë·ªãnh');
        }
      } catch (error: any) {
        console.error('L·ªói khi l·∫•y v·ªã tr√≠:', error);
        
        // S·ª≠ d·ª•ng v·ªã tr√≠ m·∫∑c ƒë·ªãnh khi c√≥ l·ªói
        setCurrentLocation(defaultLocation);
        
        // X·ª≠ l√Ω error message
        const errorCode = error.message || 'UNKNOWN_ERROR';
        setLocationError(getErrorMessage(errorCode));
        
        // Ch·ªâ hi·ªÉn th·ªã alert cho m·ªôt s·ªë l·ªói c·ª• th·ªÉ
        if (errorCode === 'PERMISSION_DENIED' || errorCode === 'LOCATION_SERVICE_DISABLED') {
          setTimeout(() => {
            showLocationErrorAlert(errorCode);
          }, 500); // Delay ƒë·ªÉ tr√°nh conflict v·ªõi c√°c alert kh√°c
        }
      } finally {
        setIsLoadingLocation(false);
      }
    };

    fetchLocation();
  }, [hasTriedLocation]);

  // H√†m ƒë·ªÉ ng∆∞·ªùi d√πng th·ª≠ l·∫°i vi·ªác l·∫•y v·ªã tr√≠
  const handleRetryLocation = async () => {
    if (isLoadingLocation) return; // Tr√°nh multiple calls
    
    try {
      setIsLoadingLocation(true);
      setLocationError('');
      
      console.log('Ng∆∞·ªùi d√πng th·ª≠ l·∫°i l·∫•y v·ªã tr√≠...');
      // const location = await getCurrentLocation();
      const location = false;
      
      if (location) {
        setCurrentLocation(location);
        setLocationError('');
        Alert.alert('Th√†nh c√¥ng', 'ƒê√£ c·∫≠p nh·∫≠t v·ªã tr√≠ c·ªßa b·∫°n!');
      }
    } catch (error: any) {
      console.error('L·ªói khi th·ª≠ l·∫°i l·∫•y v·ªã tr√≠:', error);
      
      // Gi·ªØ nguy√™n v·ªã tr√≠ m·∫∑c ƒë·ªãnh
      setCurrentLocation(defaultLocation);
      
      const errorCode = error.message || 'UNKNOWN_ERROR';
      setLocationError(getErrorMessage(errorCode));
      
      // Ch·ªâ hi·ªÉn th·ªã alert cho permission denied
      if (errorCode === 'PERMISSION_DENIED') {
        showLocationErrorAlert(errorCode);
      } else if (errorCode !== 'USER_DENIED_CONSENT') {
        // Hi·ªÉn th·ªã th√¥ng b√°o chung cho c√°c l·ªói kh√°c (tr·ª´ user deny)
        Alert.alert(
          'Th√¥ng b√°o',
          'Kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠ c·ªßa b·∫°n. ·ª®ng d·ª•ng s·∫Ω ti·∫øp t·ª•c s·ª≠ d·ª•ng v·ªã tr√≠ m·∫∑c ƒë·ªãnh.',
          [{ text: 'OK' }]
        );
      }
    } finally {
      setIsLoadingLocation(false);
    }
  };

  const [stats, setStats] = useState({
    todayBookings: 0,
    thisMonthIncome: 0,
    pendingBookings: 0,
  });

  useEffect(() => {
    fetchDashboardStats();
  }, []);

  const fetchDashboardStats = async () => {
    const data = {
      todayBookings: 3,
      thisMonthIncome: 1500000,
      pendingBookings: 2,
    };
    setStats(data);
  };

  return (
    <Box flex={1} bg="#fceff1">
      <NavBarDashboard
        fullName="Nguyen Ngoc Hieu"
        onProfilePress={() => console.log('Profile pressed')}
        onLogout={() => console.log('Logout pressed')}
      />
      
      <ScrollView 
        contentContainerStyle={{ padding: 16 }}
        showsVerticalScrollIndicator={false}
      >
        {/* Header */}
        <VStack space={1} mb={6}>
          <Text fontSize="3xl" fontWeight="bold" color="gray.800">
            T·ªïng quan
          </Text>
          <Text fontSize="md" color="gray.600">
            Ch√†o m·ª´ng b·∫°n tr·ªü l·∫°i! üëã
          </Text>
          
          {/* Hi·ªÉn th·ªã th√¥ng tin v·ªã tr√≠ */}
          {isLoadingLocation ? (
            <Box mt={2} p={3} bg="gray.50" borderRadius={8}>
              <Text fontSize="sm" color="gray.600">
                ƒêang l·∫•y th√¥ng tin v·ªã tr√≠...
              </Text>
            </Box>
          ) : currentLocation ? (
            <Box mt={2} p={3} bg="blue.50" borderRadius={8} borderLeftWidth={4} borderLeftColor="blue.500">
              <HStack justifyContent="space-between" alignItems="center">
                <VStack flex={1}>
                  <Text fontSize="sm" color="gray.700" fontWeight="medium">
                    V·ªã tr√≠ hi·ªán t·∫°i:
                  </Text>
                  <Text fontSize="xs" color="gray.600">
                    Kinh ƒë·ªô: {currentLocation.longitude.toFixed(6)}
                  </Text>
                  <Text fontSize="xs" color="gray.600">
                    Vƒ© ƒë·ªô: {currentLocation.latitude.toFixed(6)}
                  </Text>
                </VStack>
                {locationError && (
                  <Button
                    size="sm"
                    variant="outline"
                    colorScheme="blue"
                    onPress={handleRetryLocation}
                    isLoading={isLoadingLocation}
                    isDisabled={isLoadingLocation}
                  >
                    Th·ª≠ l·∫°i
                  </Button>
                )}
              </HStack>
              {locationError && (
                <Text fontSize="xs" color="orange.600" mt={1}>
                  {locationError}
                </Text>
              )}
            </Box>
          ) : (
            <Box mt={2} p={3} bg="orange.50" borderRadius={8} borderLeftWidth={4} borderLeftColor="orange.500">
              <HStack justifyContent="space-between" alignItems="center">
                <VStack flex={1}>
                  <Text fontSize="sm" color="orange.700">
                    Kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠
                  </Text>
                  <Text fontSize="xs" color="orange.600">
                    ƒêang s·ª≠ d·ª•ng v·ªã tr√≠ m·∫∑c ƒë·ªãnh
                  </Text>
                </VStack>
                <Button
                  size="sm"
                  variant="outline"
                  colorScheme="orange"
                  onPress={handleRetryLocation}
                  isLoading={isLoadingLocation}
                  isDisabled={isLoadingLocation}
                >
                  Th·ª≠ l·∫°i
                </Button>
              </HStack>
            </Box>
          )}
        </VStack>

        {/* Stats Cards */}
        <VStack space={4} mb={6}>
          {/* Top row */}
          <HStack space={4}>
            <Box 
              flex={1} 
              bg="white" 
              p={5} 
              borderRadius="xl" 
              shadow={2}
              alignItems="center"
              borderWidth={1}
              borderColor="gray.100"
            >
              <Text fontSize="md" color="gray.700" fontWeight="medium" mb={2}>
                H√¥m nay
              </Text>
              <Text fontSize="2xl" fontWeight="bold" color="#ff6b81" mb={1}>
                {stats.todayBookings}
              </Text>
              <Text fontSize="sm" color="gray.700">
                Booking
              </Text>
            </Box>

            <Box 
              flex={1} 
              bg="white" 
              p={5} 
              borderRadius="xl" 
              shadow={2}
              alignItems="center"
              borderWidth={1}
              borderColor="gray.100"
            >
              <Text fontSize="md" color="gray.700" fontWeight="medium" mb={2}>
                ƒêang ch·ªù
              </Text>
              <Text fontSize="2xl" fontWeight="bold" color="#ff6b81" mb={1}>
                {stats.pendingBookings}
              </Text>
              <Text fontSize="sm" color="gray.700">
                Booking
              </Text>
            </Box>
          </HStack>
          
          {/* Bottom row - Income card full width */}
          <Box 
            bg="#ff6b81" 
            p={5} 
            borderRadius="xl" 
            shadow={2}
            alignItems="center"
            borderWidth={1}
            borderColor="gray.100"
          >
            <Text fontSize="md" color="white" fontWeight="medium" mb={2}>
              Thu nh·∫≠p th√°ng n√†y
            </Text>
            <Text fontSize="2xl" fontWeight="bold" color="white" mb={1}>
              {stats.thisMonthIncome.toLocaleString()}ƒë
            </Text>
            <Text fontSize="sm" color="white">
              Doanh thu
            </Text>
          </Box>
        </VStack>

        {/* Decorative Divider */}
        <Center mb={6}>
          <Box w="50%" h="1" bg="gray.200" borderRadius="full" />
        </Center>

        {/* Quick Actions */}
        <VStack space={1} mb={4}>
          <Text fontSize="2xl" fontWeight="bold" color="gray.800">
            Qu·∫£n l√Ω nhanh
          </Text>
          <Text fontSize="sm" color="gray.600" mb={4}>
            C√°c t√≠nh nƒÉng th∆∞·ªùng d√πng
          </Text>
        </VStack>

        <VStack space={3}>
          <Button 
            colorScheme="pink" 
            borderRadius="full" 
            size="lg"
            onPress={() => navigation.navigate('ManageServices')}
            _text={{ fontSize: "md", fontWeight: "semibold" }}
          >
            Qu·∫£n l√Ω d·ªãch v·ª•
          </Button>
          
          <Button 
            variant="outline" 
            borderRadius="full" 
            size="lg"
            onPress={() => navigation.navigate('Profile')}
            _text={{ fontSize: "md", fontWeight: "semibold" }}
            borderColor="#ff6b81"
          >
            C·∫≠p nh·∫≠t h·ªì s∆°
          </Button>
          
          <Button 
            variant="outline" 
            borderRadius="full" 
            size="lg"
            onPress={() => navigation.navigate('BookingHistory')}
            _text={{ fontSize: "md", fontWeight: "semibold" }}
            borderColor="#ff6b81"
          >
            L·ªãch s·ª≠ booking
          </Button>
        </VStack>

        {/* Bottom spacing */}
        <Box h={8} />
      </ScrollView>
    </Box>
  );
}